[General]
# The ${repetition} variable holds the current repetition number. We want to iterate n times for each
# parameter set to calculate the responsiveness and other properties.
repeat = 5
seed-set = ${repetition}
network = Network
sim-time-limit = 192h
warmup-period = 24h
**.machine[*].degradation_factor = 0.2
**.channel.datarate = 8000bps
**.phisicalMachines = 400
**.virtualMachines = 400
**.mainQueueCapacity = 20
**.uploadQueueCapacity = 0
**.machine[*].serviceTime = exponential(10000s)
**.remoteDataCenter[*].cyclicSource.interArrivalTime1 = exponential(25s)
**.vmDiskSize = exponential(200000B)
**.respLimit = 60s


[Config Constant]
# Extensions explore an increase in capacity of up to 10%
**.localDataCenter.cyclicSource.interArrivalTime1 = exponential(25s)

[Config ConstPhisical]
extends = Constant
description = "The system capacity is based on the number of phisical machines."
**.localDataCenter.phisicalMachines.param-record-as-scalar = true
**.localDataCenter.phisicalMachines = ${400..442 step 4}

[Config ConstQueueing]
extends = Constant
description = "The system capacity is based on system queue size."
**.localDataCenter.mainQueueCapacity.param-record-as-scalar = true
**.localDataCenter.mainQueueCapacity = ${20..62 step 4}

[Config ConstMultiplexing]
extends = Constant
description = "The system capacity is based on the number of virtual machines/resources"
**.localDataCenter.virtualMachines.param-record-as-scalar = true
**.localDataCenter.virtualMachines = ${400..442 step 4}

[Config ConstFederation]
extends = Constant
description = "The system capacity is based on the size of the upload queue"
**.localDataCenter.uploadQueueCapacity.param-record-as-scalar = true
**.localDataCenter.uploadQueueCapacity = ${0..42 step 4}


[Config Periodic]
**.localDataCenter.cyclicSource.interArrivalTime1 = exponential(250s)
**.localDataCenter.cyclicSource.interArrivalTime2 = exponential(25s)
**.localDataCenter.cyclicSource.interArrivalTimeDuration1 = exponential(16h)
**.localDataCenter.cyclicSource.interArrivalTimeDuration2 = exponential(8h)
**.localDataCenter.phisicalMachines = 400-${mpx=0..189 step 18}


[Config PeriodicQueueing]
extends = Periodic
description = "The system capacity is based on system queue size."
**.localDataCenter.mainQueueCapacity.param-record-as-scalar = true
**.localDataCenter.mainQueueCapacity = 20+${mpx}

[Config PeriodicMultiplexing]
extends = Periodic
description = "The system capacity is based on the number of virtual machines/resources"
**.localDataCenter.virtualMachines.param-record-as-scalar = true
**.localDataCenter.virtualMachines = 400+${mpx}

[Config PeriodicFederation]
extends = Periodic
description = "The system capacity is based on the size of the upload queue"
**.localDataCenter.uploadQueueCapacity.param-record-as-scalar = true
**.localDataCenter.uploadQueueCapacity = 0+${mpx}


[Config Bursty]
sim-time-limit = 28h
warmup-period = 24h
repeat = 15
**.localDataCenter.instantService.vector-recording = true
**.localDataCenter.availability_t.vector-recording = true
**.localDataCenter.cyclicSource.cycle = false
**.localDataCenter.cyclicSource.interArrivalTime1 = exponential(28s)
**.localDataCenter.cyclicSource.interArrivalTime2 = exponential(14s)
**.localDataCenter.cyclicSource.interArrivalTime3 = exponential(28s)
**.localDataCenter.cyclicSource.interArrivalTimeDuration1 = 5000s
**.localDataCenter.cyclicSource.interArrivalTimeDuration2 = 4000s
**.localDataCenter.cyclicSource.interArrivalTimeDuration3 = 24h5000s

# Bursty doesn't need parameters as scalars. They don't hurt either.
[Config BurstyQueueing]
extends = Bursty
description = "The system capacity is based on system queue size."
**.localDataCenter.mainQueueCapacity.param-record-as-scalar = true
**.localDataCenter.mainQueueCapacity = 62

[Config BurstyMultiplexing]
extends = Bursty
description = "The system capacity is based on the number of virtual machines/resources"
**.localDataCenter.virtualMachines.param-record-as-scalar = true
**.localDataCenter.virtualMachines = 442

[Config BurstyFederation]
extends = Bursty
description = "The system capacity is based on the size of the upload queue"
**.localDataCenter.uploadQueueCapacity.param-record-as-scalar = true
**.localDataCenter.uploadQueueCapacity = 42